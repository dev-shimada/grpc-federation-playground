// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: message/v1/message.proto

package messagev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dev-shimada/grpc-federation-playground/gen/message/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "message.v1.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServicePostProcedure is the fully-qualified name of the MessageService's Post RPC.
	MessageServicePostProcedure = "/message.v1.MessageService/Post"
	// MessageServiceGetProcedure is the fully-qualified name of the MessageService's Get RPC.
	MessageServiceGetProcedure = "/message.v1.MessageService/Get"
	// MessageServicePingPongProcedure is the fully-qualified name of the MessageService's PingPong RPC.
	MessageServicePingPongProcedure = "/message.v1.MessageService/PingPong"
)

// MessageServiceClient is a client for the message.v1.MessageService service.
type MessageServiceClient interface {
	Post(context.Context, *connect.Request[v1.PostRequest]) (*connect.Response[v1.PostResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	PingPong(context.Context, *connect.Request[v1.PingPongRequest]) (*connect.Response[v1.PingPongResponse], error)
}

// NewMessageServiceClient constructs a client for the message.v1.MessageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messageServiceMethods := v1.File_message_v1_message_proto.Services().ByName("MessageService").Methods()
	return &messageServiceClient{
		post: connect.NewClient[v1.PostRequest, v1.PostResponse](
			httpClient,
			baseURL+MessageServicePostProcedure,
			connect.WithSchema(messageServiceMethods.ByName("Post")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+MessageServiceGetProcedure,
			connect.WithSchema(messageServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		pingPong: connect.NewClient[v1.PingPongRequest, v1.PingPongResponse](
			httpClient,
			baseURL+MessageServicePingPongProcedure,
			connect.WithSchema(messageServiceMethods.ByName("PingPong")),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	post     *connect.Client[v1.PostRequest, v1.PostResponse]
	get      *connect.Client[v1.GetRequest, v1.GetResponse]
	pingPong *connect.Client[v1.PingPongRequest, v1.PingPongResponse]
}

// Post calls message.v1.MessageService.Post.
func (c *messageServiceClient) Post(ctx context.Context, req *connect.Request[v1.PostRequest]) (*connect.Response[v1.PostResponse], error) {
	return c.post.CallUnary(ctx, req)
}

// Get calls message.v1.MessageService.Get.
func (c *messageServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// PingPong calls message.v1.MessageService.PingPong.
func (c *messageServiceClient) PingPong(ctx context.Context, req *connect.Request[v1.PingPongRequest]) (*connect.Response[v1.PingPongResponse], error) {
	return c.pingPong.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the message.v1.MessageService service.
type MessageServiceHandler interface {
	Post(context.Context, *connect.Request[v1.PostRequest]) (*connect.Response[v1.PostResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	PingPong(context.Context, *connect.Request[v1.PingPongRequest]) (*connect.Response[v1.PingPongResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageServiceMethods := v1.File_message_v1_message_proto.Services().ByName("MessageService").Methods()
	messageServicePostHandler := connect.NewUnaryHandler(
		MessageServicePostProcedure,
		svc.Post,
		connect.WithSchema(messageServiceMethods.ByName("Post")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceGetHandler := connect.NewUnaryHandler(
		MessageServiceGetProcedure,
		svc.Get,
		connect.WithSchema(messageServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	messageServicePingPongHandler := connect.NewUnaryHandler(
		MessageServicePingPongProcedure,
		svc.PingPong,
		connect.WithSchema(messageServiceMethods.ByName("PingPong")),
		connect.WithHandlerOptions(opts...),
	)
	return "/message.v1.MessageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageServicePostProcedure:
			messageServicePostHandler.ServeHTTP(w, r)
		case MessageServiceGetProcedure:
			messageServiceGetHandler.ServeHTTP(w, r)
		case MessageServicePingPongProcedure:
			messageServicePingPongHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) Post(context.Context, *connect.Request[v1.PostRequest]) (*connect.Response[v1.PostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("message.v1.MessageService.Post is not implemented"))
}

func (UnimplementedMessageServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("message.v1.MessageService.Get is not implemented"))
}

func (UnimplementedMessageServiceHandler) PingPong(context.Context, *connect.Request[v1.PingPongRequest]) (*connect.Response[v1.PingPongResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("message.v1.MessageService.PingPong is not implemented"))
}
