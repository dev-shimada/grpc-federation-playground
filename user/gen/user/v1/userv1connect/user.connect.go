// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dev-shimada/grpc-federation-playground/user/gen/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServicePostProcedure is the fully-qualified name of the UserService's Post RPC.
	UserServicePostProcedure = "/user.v1.UserService/Post"
	// UserServiceGetProcedure is the fully-qualified name of the UserService's Get RPC.
	UserServiceGetProcedure = "/user.v1.UserService/Get"
	// UserServicePingPongProcedure is the fully-qualified name of the UserService's PingPong RPC.
	UserServicePingPongProcedure = "/user.v1.UserService/PingPong"
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	Post(context.Context, *connect.Request[v1.PostRequest]) (*connect.Response[v1.PostResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	PingPong(context.Context, *connect.Request[v1.PingPongRequest]) (*connect.Response[v1.PingPongResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		post: connect.NewClient[v1.PostRequest, v1.PostResponse](
			httpClient,
			baseURL+UserServicePostProcedure,
			connect.WithSchema(userServiceMethods.ByName("Post")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+UserServiceGetProcedure,
			connect.WithSchema(userServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		pingPong: connect.NewClient[v1.PingPongRequest, v1.PingPongResponse](
			httpClient,
			baseURL+UserServicePingPongProcedure,
			connect.WithSchema(userServiceMethods.ByName("PingPong")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	post     *connect.Client[v1.PostRequest, v1.PostResponse]
	get      *connect.Client[v1.GetRequest, v1.GetResponse]
	pingPong *connect.Client[v1.PingPongRequest, v1.PingPongResponse]
}

// Post calls user.v1.UserService.Post.
func (c *userServiceClient) Post(ctx context.Context, req *connect.Request[v1.PostRequest]) (*connect.Response[v1.PostResponse], error) {
	return c.post.CallUnary(ctx, req)
}

// Get calls user.v1.UserService.Get.
func (c *userServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// PingPong calls user.v1.UserService.PingPong.
func (c *userServiceClient) PingPong(ctx context.Context, req *connect.Request[v1.PingPongRequest]) (*connect.Response[v1.PingPongResponse], error) {
	return c.pingPong.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	Post(context.Context, *connect.Request[v1.PostRequest]) (*connect.Response[v1.PostResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	PingPong(context.Context, *connect.Request[v1.PingPongRequest]) (*connect.Response[v1.PingPongResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	userServicePostHandler := connect.NewUnaryHandler(
		UserServicePostProcedure,
		svc.Post,
		connect.WithSchema(userServiceMethods.ByName("Post")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetHandler := connect.NewUnaryHandler(
		UserServiceGetProcedure,
		svc.Get,
		connect.WithSchema(userServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	userServicePingPongHandler := connect.NewUnaryHandler(
		UserServicePingPongProcedure,
		svc.PingPong,
		connect.WithSchema(userServiceMethods.ByName("PingPong")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServicePostProcedure:
			userServicePostHandler.ServeHTTP(w, r)
		case UserServiceGetProcedure:
			userServiceGetHandler.ServeHTTP(w, r)
		case UserServicePingPongProcedure:
			userServicePingPongHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) Post(context.Context, *connect.Request[v1.PostRequest]) (*connect.Response[v1.PostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.Post is not implemented"))
}

func (UnimplementedUserServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.Get is not implemented"))
}

func (UnimplementedUserServiceHandler) PingPong(context.Context, *connect.Request[v1.PingPongRequest]) (*connect.Response[v1.PingPongResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.PingPong is not implemented"))
}
