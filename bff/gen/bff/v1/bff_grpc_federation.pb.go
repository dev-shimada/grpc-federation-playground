// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: v1.9.9
//
// source: bff/v1/bff.proto
package bffv1

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	messagev1 "github.com/dev-shimada/grpc-federation-playground/bff/gen/message/v1"
	userv1 "github.com/dev-shimada/grpc-federation-playground/bff/gen/user/v1"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Bff_V1_GetMessageResponseArgument is argument for "bff.v1.GetMessageResponse" message.
type BffService_Bff_V1_GetMessageResponseArgument struct {
	Message   *Message
	MessageId string
	User      *User
}

// Bff_V1_MessageArgument is argument for "bff.v1.Message" message.
type BffService_Bff_V1_MessageArgument struct {
	Id  string
	Res *messagev1.GetResponse
}

// Bff_V1_UserArgument is argument for "bff.v1.User" message.
type BffService_Bff_V1_UserArgument struct {
	Id  string
	Res *userv1.GetResponse
}

// BffServiceConfig configuration required to initialize the service that use GRPC Federation.
type BffServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client BffServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// BffServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type BffServiceClientFactory interface {
	// Message_V1_MessageServiceClient create a gRPC Client to be used to call methods in message.v1.MessageService.
	Message_V1_MessageServiceClient(BffServiceClientConfig) (messagev1.MessageServiceClient, error)
	// User_V1_UserServiceClient create a gRPC Client to be used to call methods in user.v1.UserService.
	User_V1_UserServiceClient(BffServiceClientConfig) (userv1.UserServiceClient, error)
}

// BffServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type BffServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// BffServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type BffServiceDependentClientSet struct {
	Message_V1_MessageServiceClient messagev1.MessageServiceClient
	User_V1_UserServiceClient       userv1.UserServiceClient
}

// BffServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type BffServiceResolver interface {
}

// BffServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type BffServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// BffServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type BffServiceCELPluginConfig struct {
	CacheDir string
}

// BffServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type BffServiceUnimplementedResolver struct{}

const (
	BffService_DependentMethod_Message_V1_MessageService_Get = "/message.v1.MessageService/Get"
	BffService_DependentMethod_User_V1_UserService_Get       = "/user.v1.UserService/Get"
)

// BffService represents Federation Service.
type BffService struct {
	UnimplementedBffServiceServer
	cfg                BffServiceConfig
	logger             *slog.Logger
	errorHandler       grpcfed.ErrorHandler
	celCacheMap        *grpcfed.CELCacheMap
	tracer             trace.Tracer
	celTypeHelper      *grpcfed.CELTypeHelper
	celEnvOpts         []grpcfed.CELEnvOption
	celPluginInstances []*grpcfedcel.CELPluginInstance
	client             *BffServiceDependentClientSet
}

// NewBffService creates BffService instance by BffServiceConfig.
func NewBffService(cfg BffServiceConfig) (*BffService, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	Message_V1_MessageServiceClient, err := cfg.Client.Message_V1_MessageServiceClient(BffServiceClientConfig{
		Service: "message.v1.MessageService",
	})
	if err != nil {
		return nil, err
	}
	User_V1_UserServiceClient, err := cfg.Client.User_V1_UserServiceClient(BffServiceClientConfig{
		Service: "user.v1.UserService",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.bff.v1.GetMessageResponseArgument": {
			"message_id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "MessageId"),
		},
		"grpc.federation.private.bff.v1.MessageArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
		"grpc.federation.private.bff.v1.UserArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper("bff.v1", celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	svc := &BffService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		celEnvOpts:    celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("bff.v1.BffService"),
		client: &BffServiceDependentClientSet{
			Message_V1_MessageServiceClient: Message_V1_MessageServiceClient,
			User_V1_UserServiceClient:       User_V1_UserServiceClient,
		},
	}
	return svc, nil
}

// CleanupBffService cleanup all resources to prevent goroutine leaks.
func CleanupBffService(ctx context.Context, svc *BffService) {
	svc.cleanup(ctx)
}

func (s *BffService) cleanup(ctx context.Context) {
	for _, instance := range s.celPluginInstances {
		instance.Close(ctx)
	}
}

// GetMessage implements "bff.v1.BffService/GetMessage" method.
func (s *BffService) GetMessage(ctx context.Context, req *GetMessageRequest) (res *GetMessageResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "bff.v1.BffService/GetMessage")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()

	defer func() {
		// cleanup plugin instance memory.
		for _, instance := range s.celPluginInstances {
			instance.GC()
		}
	}()
	res, err := s.resolve_Bff_V1_GetMessageResponse(ctx, &BffService_Bff_V1_GetMessageResponseArgument{
		MessageId: req.GetMessageId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Bff_V1_GetMessageResponse resolve "bff.v1.GetMessageResponse" message.
func (s *BffService) resolve_Bff_V1_GetMessageResponse(ctx context.Context, req *BffService_Bff_V1_GetMessageResponseArgument) (*GetMessageResponse, error) {
	ctx, span := s.tracer.Start(ctx, "bff.v1.GetMessageResponse")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve bff.v1.GetMessageResponse", slog.Any("message_args", s.logvalue_Bff_V1_GetMessageResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Message *Message
			User    *User
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.bff.v1.GetMessageResponseArgument", req)}
	/*
		def {
		  name: "message"
		  message {
		    name: "Message"
		    args { name: "id", by: "$.message_id" }
		  }
		}
	*/
	def_message := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*Message, *localValueType]{
			Name: `message`,
			Type: grpcfed.CELObjectType("bff.v1.Message"),
			Setter: func(value *localValueType, v *Message) error {
				value.vars.Message = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &BffService_Bff_V1_MessageArgument{}
				// { name: "id", by: "$.message_id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `$.message_id`,
					CacheIndex: 1,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Bff_V1_Message(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "user"
		  message {
		    name: "User"
		    args { name: "id", by: "message.user_id" }
		  }
		}
	*/
	def_user := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*User, *localValueType]{
			Name: `user`,
			Type: grpcfed.CELObjectType("bff.v1.User"),
			Setter: func(value *localValueType, v *User) error {
				value.vars.User = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &BffService_Bff_V1_UserArgument{}
				// { name: "id", by: "message.user_id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `message.user_id`,
					CacheIndex: 2,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Bff_V1_User(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	if err := def_message(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	if err := def_user(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Message = value.vars.Message
	req.User = value.vars.User

	// create a message value to be returned.
	ret := &GetMessageResponse{}

	// field binding section.
	// (grpc.federation.field).by = "message"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*Message]{
		Value:      value,
		Expr:       `message`,
		CacheIndex: 3,
		Setter: func(v *Message) error {
			ret.Message = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*User]{
		Value:      value,
		Expr:       `user`,
		CacheIndex: 4,
		Setter: func(v *User) error {
			ret.User = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved bff.v1.GetMessageResponse", slog.Any("bff.v1.GetMessageResponse", s.logvalue_Bff_V1_GetMessageResponse(ret)))
	return ret, nil
}

// resolve_Bff_V1_Message resolve "bff.v1.Message" message.
func (s *BffService) resolve_Bff_V1_Message(ctx context.Context, req *BffService_Bff_V1_MessageArgument) (*Message, error) {
	ctx, span := s.tracer.Start(ctx, "bff.v1.Message")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve bff.v1.Message", slog.Any("message_args", s.logvalue_Bff_V1_MessageArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Res *messagev1.GetResponse
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.bff.v1.MessageArgument", req)}
	/*
		def {
		  name: "res"
		  autobind: true
		  call {
		    method: "message.v1.MessageService/Get"
		    request { field: "id", by: "$.id" }
		  }
		}
	*/
	def_res := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*messagev1.GetResponse, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("message.v1.GetResponse"),
			Setter: func(value *localValueType, v *messagev1.GetResponse) error {
				value.vars.Res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &messagev1.GetRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `$.id`,
					CacheIndex: 5,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call message.v1.MessageService/Get", slog.Any("message.v1.GetRequest", s.logvalue_Message_V1_GetRequest(args)))
				ret, err := s.client.Message_V1_MessageServiceClient.Get(ctx, args)
				if err != nil {
					if err := s.errorHandler(ctx, BffService_DependentMethod_Message_V1_MessageService_Get, err); err != nil {
						return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
					}
				}
				return ret, nil
			},
		})
	}

	if err := def_res(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.Res

	// create a message value to be returned.
	ret := &Message{}

	// field binding section.
	ret.UserId = value.vars.Res.GetUserId() // { name: "res", autobind: true }
	ret.Text = value.vars.Res.GetText()     // { name: "res", autobind: true }

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved bff.v1.Message", slog.Any("bff.v1.Message", s.logvalue_Bff_V1_Message(ret)))
	return ret, nil
}

// resolve_Bff_V1_User resolve "bff.v1.User" message.
func (s *BffService) resolve_Bff_V1_User(ctx context.Context, req *BffService_Bff_V1_UserArgument) (*User, error) {
	ctx, span := s.tracer.Start(ctx, "bff.v1.User")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve bff.v1.User", slog.Any("message_args", s.logvalue_Bff_V1_UserArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Res *userv1.GetResponse
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.bff.v1.UserArgument", req)}
	/*
		def {
		  name: "res"
		  autobind: true
		  call {
		    method: "user.v1.UserService/Get"
		    request { field: "id", by: "$.id" }
		  }
		}
	*/
	def_res := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*userv1.GetResponse, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("user.v1.GetResponse"),
			Setter: func(value *localValueType, v *userv1.GetResponse) error {
				value.vars.Res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &userv1.GetRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `$.id`,
					CacheIndex: 6,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call user.v1.UserService/Get", slog.Any("user.v1.GetRequest", s.logvalue_User_V1_GetRequest(args)))
				ret, err := s.client.User_V1_UserServiceClient.Get(ctx, args)
				if err != nil {
					if err := s.errorHandler(ctx, BffService_DependentMethod_User_V1_UserService_Get, err); err != nil {
						return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
					}
				}
				return ret, nil
			},
		})
	}

	if err := def_res(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.Res

	// create a message value to be returned.
	ret := &User{}

	// field binding section.
	ret.Id = value.vars.Res.GetId()               // { name: "res", autobind: true }
	ret.Email = value.vars.Res.GetEmail()         // { name: "res", autobind: true }
	ret.Name = value.vars.Res.GetName()           // { name: "res", autobind: true }
	ret.CreatedAt = value.vars.Res.GetCreatedAt() // { name: "res", autobind: true }
	ret.UpdatedAt = value.vars.Res.GetUpdatedAt() // { name: "res", autobind: true }

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved bff.v1.User", slog.Any("bff.v1.User", s.logvalue_Bff_V1_User(ret)))
	return ret, nil
}

func (s *BffService) logvalue_Bff_V1_GetMessageResponse(v *GetMessageResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("message", s.logvalue_Bff_V1_Message(v.GetMessage())),
		slog.Any("user", s.logvalue_Bff_V1_User(v.GetUser())),
	)
}

func (s *BffService) logvalue_Bff_V1_GetMessageResponseArgument(v *BffService_Bff_V1_GetMessageResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("message_id", v.MessageId),
	)
}

func (s *BffService) logvalue_Bff_V1_Message(v *Message) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("user_id", v.GetUserId()),
		slog.String("text", v.GetText()),
	)
}

func (s *BffService) logvalue_Bff_V1_MessageArgument(v *BffService_Bff_V1_MessageArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *BffService) logvalue_Bff_V1_User(v *User) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.String("email", v.GetEmail()),
		slog.String("name", v.GetName()),
		slog.String("created_at", v.GetCreatedAt()),
		slog.String("updated_at", v.GetUpdatedAt()),
	)
}

func (s *BffService) logvalue_Bff_V1_UserArgument(v *BffService_Bff_V1_UserArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *BffService) logvalue_Message_V1_GetRequest(v *messagev1.GetRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
	)
}

func (s *BffService) logvalue_Message_V1_PingPongRequest(v *messagev1.PingPongRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("user_id", v.GetUserId()),
		slog.String("text", v.GetText()),
	)
}

func (s *BffService) logvalue_Message_V1_PostRequest(v *messagev1.PostRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("user_id", v.GetUserId()),
		slog.String("text", v.GetText()),
	)
}

func (s *BffService) logvalue_User_V1_GetRequest(v *userv1.GetRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
	)
}

func (s *BffService) logvalue_User_V1_PingPongRequest(v *userv1.PingPongRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("email", v.GetEmail()),
		slog.String("name", v.GetName()),
	)
}

func (s *BffService) logvalue_User_V1_PostRequest(v *userv1.PostRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("email", v.GetEmail()),
		slog.String("name", v.GetName()),
	)
}
