// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bff.proto

package bffv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dev-shimada/grpc-federation-playground/bff/gen/bff/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BffServiceName is the fully-qualified name of the BffService service.
	BffServiceName = "bff.v1.BffService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BffServiceGetMessageProcedure is the fully-qualified name of the BffService's GetMessage RPC.
	BffServiceGetMessageProcedure = "/bff.v1.BffService/GetMessage"
)

// BffServiceClient is a client for the bff.v1.BffService service.
type BffServiceClient interface {
	// rpc Post(PostRequest) returns (PostResponse);
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error)
}

// NewBffServiceClient constructs a client for the bff.v1.BffService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBffServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BffServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bffServiceMethods := v1.File_bff_proto.Services().ByName("BffService").Methods()
	return &bffServiceClient{
		getMessage: connect.NewClient[v1.GetMessageRequest, v1.GetMessageResponse](
			httpClient,
			baseURL+BffServiceGetMessageProcedure,
			connect.WithSchema(bffServiceMethods.ByName("GetMessage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bffServiceClient implements BffServiceClient.
type bffServiceClient struct {
	getMessage *connect.Client[v1.GetMessageRequest, v1.GetMessageResponse]
}

// GetMessage calls bff.v1.BffService.GetMessage.
func (c *bffServiceClient) GetMessage(ctx context.Context, req *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error) {
	return c.getMessage.CallUnary(ctx, req)
}

// BffServiceHandler is an implementation of the bff.v1.BffService service.
type BffServiceHandler interface {
	// rpc Post(PostRequest) returns (PostResponse);
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error)
}

// NewBffServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBffServiceHandler(svc BffServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bffServiceMethods := v1.File_bff_proto.Services().ByName("BffService").Methods()
	bffServiceGetMessageHandler := connect.NewUnaryHandler(
		BffServiceGetMessageProcedure,
		svc.GetMessage,
		connect.WithSchema(bffServiceMethods.ByName("GetMessage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bff.v1.BffService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BffServiceGetMessageProcedure:
			bffServiceGetMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBffServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBffServiceHandler struct{}

func (UnimplementedBffServiceHandler) GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bff.v1.BffService.GetMessage is not implemented"))
}
